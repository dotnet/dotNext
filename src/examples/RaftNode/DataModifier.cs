using System.Buffers.Binary;
using DotNext.Net.Cluster.Consensus.Raft;

namespace RaftNode;

internal sealed class DataModifier(IRaftCluster cluster, StateMachine stateMachine) : BackgroundService
{
    protected override async Task ExecuteAsync(CancellationToken stoppingToken)
    {
        using var timer = new PeriodicTimer(TimeSpan.FromSeconds(1));
        var buffer = new byte[sizeof(long)];
        while (await timer.WaitForNextTickAsync(stoppingToken).ConfigureAwait(false))
        {
            if (!cluster.LeadershipToken.IsCancellationRequested)
            {
                // volatile read to avoid any caching of Value by compiler
                var newValue = Volatile.Read(in stateMachine.Value) + 500L;
                Console.WriteLine("Saving value {0} generated by the leader node", newValue);

                try
                {
                    BinaryPrimitives.WriteInt64LittleEndian(buffer, newValue);
                    await cluster.ReplicateAsync(buffer, token: stoppingToken);
                }
                catch (Exception e)
                {
                    Console.WriteLine("Unexpected error {0}", e);
                }
            }
        }
    }
}